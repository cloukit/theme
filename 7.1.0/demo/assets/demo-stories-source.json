{
  "story-00-basic.html": "<div class=\"demo\">\n  <p>\n    Hover the element to see the changing <strong>uiModifer</strong>\n    or click the element to see the changing <strong>uiState</strong>.\n  </p>\n\n  <div\n    [ngStyle]=\"getStyle('myelement').style\"\n    (click)=\"toggleUiState()\"\n    (mouseenter)=\"toggleUiModifier()\"\n    (mouseleave)=\"toggleUiModifier()\"\n  >\n    <svg\n      width=\"40\"\n      height=\"40\"\n      viewBox=\"0 0 512 512\" xmlns=\"http://www.w3.org/2000/svg\"\n      [ngStyle]=\"getStyle('mysvg').style\"\n    >\n      <path\n        [ngStyle]=\"getStyle('mysvg').icon.svgStyle\"\n        [attr.d]=\"getStyle('mysvg').icon.svgPathD\"\n      ></path>\n    </svg>\n    click me\n  </div>\n\n  <p>The component knows about its <strong>uiState</strong> which is <code class=\"code\">{{ uiState }}</code> and its <strong>uiModifier</strong> which is <code class=\"code\">{{ uiModifier }}</code>.</p>\n  <p>The full theme for element <code class=\"code\">myelement</code> looks like this:</p>\n  <pre class=\"preview\">{{ getStyle('myelement') | json}}</pre>\n  <p>The full theme for element <code class=\"code\">mysvg</code> looks like this:</p>\n  <pre class=\"preview\">{{ getStyle('mysvg') | json}}</pre>\n</div>\n",
  "story-00-basic.ts": "import { Component } from '@angular/core';\nimport {\n  CloukitThemeService,\n  CloukitComponentTheme,\n  CloukitStatefulAndModifierAwareElementThemeStyleDefinition,\n  CloukitBaseCssDefinitions,\n  CloukitIconDefinition,\n  CloukitSvgCssDefinitions,\n} from '../../../../projects/cloukit/theme/src/public_api';\n\n/* import and use a real CSS prefixer here */\nconst prefixAll = (x) => x;\n\n@Component({\n  selector: 'cloukit-story-00-basic',\n  templateUrl: './story-00-basic.html',\n  styleUrls: [ '../demo.styles.css' ]\n})\nexport class Story00Component {\n\n  uiState = 'unclicked';\n  uiModifier = 'base';\n  theme: CloukitComponentTheme;\n  themeService: CloukitThemeService;\n\n  constructor(themeService: CloukitThemeService) {\n    //\n    // REGISTER CUSTOM THEME (Usually done once in main NgModule)\n    //\n    themeService.registerPrefixer(prefixAll);\n    themeService.registerComponentTheme('dummy', new DummyTheme());\n    //\n    // GET THEME\n    //\n    this.themeService = themeService;\n    this.theme = this.themeService.getComponentTheme('dummy');\n  }\n\n  public getStyle(element: string):\n    CloukitStatefulAndModifierAwareElementThemeStyleDefinition {\n    const style = this.theme.getStyle(element, this.uiState, this.uiModifier);\n    return this.themeService.prefixStyle(style);\n  }\n\n  public toggleUiState() {\n    if (this.uiState === 'unclicked') {\n      this.uiState = 'clicked';\n    } else {\n      this.uiState = 'unclicked';\n    }\n  }\n\n  public toggleUiModifier() {\n    if (this.uiModifier === 'base') {\n      this.uiModifier = 'hover';\n    } else {\n      this.uiModifier = 'base';\n    }\n  }\n}\n\n\nexport class DummyTheme extends CloukitComponentTheme {\n  constructor() {\n    super();\n    //\n    // MYELEMENT (buildStyle was introduced with v7.1.0)\n    //\n    this.buildStyle('myelement', 'unclicked', 'base')\n      .withStyles(<CloukitBaseCssDefinitions>{\n        border: '1px solid #555',\n        borderRadius: '30px',\n        position: 'relative',\n        padding: '12px',\n        textAlign: 'center',\n        userSelect: 'none',\n        cursor: 'pointer',\n        width: '80px',\n        height: '30px',\n        backgroundColor: '#710ECC',\n        color: '#fff',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        transition: `background-color 300ms linear, border-radius 300ms linear`,\n      });\n    this.buildStyle('myelement', 'unclicked', 'hover')\n      .inheritFrom('myelement', 'unclicked', 'base')\n      .withStyles(<CloukitBaseCssDefinitions>{\n        backgroundColor: '#c12fd7'\n      });\n\n\n    this.buildStyle('myelement', 'clicked', 'base')\n      .inheritFrom('myelement', 'unclicked', 'base')\n      .withStyles(<CloukitBaseCssDefinitions>{\n        backgroundColor: '#d72f5b',\n        borderRadius: '1px',\n      });\n    this.buildStyle('myelement', 'clicked', 'hover')\n      .inheritFrom('myelement', 'clicked', 'base')\n      .withStyles(<CloukitBaseCssDefinitions>{\n        backgroundColor: '#ff3a96',\n      });\n\n    //\n    // MYSVG (buildStyle was introduced with v7.1.0)\n    //\n    this.buildStyle('mysvg', 'unclicked', 'base')\n      .withIcon(<CloukitIconDefinition>{\n        // cube\n        svgPathD: 'M256 512C114.615 512 0 397.385 0 256S114.615 0 256 0s256 114.615 256 256-114.615 ' +\n                  '256-256 256zM134 134v245h245V134H134z',\n      })\n      .withIconStyles(<CloukitSvgCssDefinitions>{\n        fill: '#fff'\n      });\n\n    this.buildStyle('mysvg', 'clicked', 'base')\n      .inheritFrom('mysvg', 'unclicked', 'base')\n      .withIcon(<CloukitIconDefinition>{\n        // star\n        svgPathD: 'M256 512C114.615 512 0 397.385 0 256S114.615 0 256 0s256 114.615 256 256-114.615 ' +\n                  '256-256 256zm0-163.5l108.74 57.168-20.767-121.084 87.972-85.752-121.575-17.666L256 ' +\n                  '71l-54.37 110.166-121.575 17.666 87.972 85.752-20.767 121.084L256 348.5z',\n      });\n\n    this.buildStyle('mysvg', 'unclicked', 'hover')\n      .inheritFrom('mysvg', 'unclicked', 'base');\n\n    this.buildStyle('mysvg', 'clicked', 'hover')\n      .inheritFrom('mysvg', 'clicked', 'base')\n      .withIconStyles(<CloukitSvgCssDefinitions>{\n        fill: '#fefefe',\n      });\n  }\n}\n"
}