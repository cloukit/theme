{
  "story-00-basic.html": "<div class=\"demo\">\n  <h3>Custom Theme</h3>\n\n  <p>\n    Hover the element to see the changing <strong>uiModifer</strong>\n    and/or Click the element to see the changing <strong>uiState</strong>:\n  </p>\n\n  <div\n    [ngStyle]=\"getStyle('myelement').style\"\n    (click)=\"toggleUiState()\"\n    (mouseenter)=\"toggleUiModifier()\"\n    (mouseleave)=\"toggleUiModifier()\"\n  >\n    click me\n  </div>\n</div>\n",
  "story-00-basic.ts": "import { Component } from '@angular/core';\nimport { DemoComponent } from '../demo.component';\nimport {\n  CloukitThemeService,\n  CloukitComponentTheme,\n  CloukitStatefulAndModifierAwareElementThemeStyleDefinition\n} from '../../index';\n\n/* import and use a real CSS prefixer here */\nconst prefixAll = (x) => x;\n\n@Component({\n  selector: 'story-00-basic',\n  templateUrl: './story-00-basic.html',\n  styles: [ ].concat(DemoComponent.sharedStyles),\n})\nexport class Story00Component {\n\n  uiState = 'unclicked';\n  uiModifier = 'base';\n  theme: CloukitComponentTheme;\n  themeService: CloukitThemeService;\n\n  constructor(themeService: CloukitThemeService) {\n    //\n    // REGISTER CUSTOM THEME (Usually done once in main NgModule)\n    //\n    themeService.registerPrefixer(prefixAll);\n    themeService.registerComponentTheme('dummy', new DummyTheme());\n    //\n    // GET THEME\n    //\n    this.themeService = themeService;\n    this.theme = this.themeService.getComponentTheme('dummy');\n  }\n\n  private getStyle(element: string):\n    CloukitStatefulAndModifierAwareElementThemeStyleDefinition {\n    const style = this.theme.getStyle(element, this.uiState, this.uiModifier);\n    return this.themeService.prefixStyle(style);\n  }\n\n  private toggleUiState() {\n    if (this.uiState === 'unclicked') {\n      this.uiState = 'clicked';\n    } else {\n      this.uiState = 'unclicked';\n    }\n  }\n\n  private toggleUiModifier() {\n    if (this.uiModifier === 'base') {\n      this.uiModifier = 'hover';\n    } else {\n      this.uiModifier = 'base';\n    }\n  }\n}\n\n\nexport class DummyTheme extends CloukitComponentTheme {\n  constructor() {\n    super();\n    this.createStyle('myelement', 'unclicked', 'base', {\n      style: {\n        border: '1px solid #555',\n        borderRadius: '30px',\n        position: 'relative',\n        padding: '12px',\n        textAlign: 'center',\n        userSelect: 'none',\n        cursor: 'pointer',\n        width: '80px',\n        height: '30px',\n        display: 'inline-block',\n        backgroundColor: '#383838',\n        color: '#fff',\n        transition: `background-color 300ms linear,\n          border-radius 300ms linear`,\n      }\n    } as CloukitStatefulAndModifierAwareElementThemeStyleDefinition);\n\n    this.createStyle('myelement', 'clicked', 'base',\n      this.merge(this.getStyle('myelement', 'unclicked', 'base'), {\n        style: {\n          backgroundColor: '#9650D7',\n          borderRadius: '1px',\n        }\n      } as CloukitStatefulAndModifierAwareElementThemeStyleDefinition));\n\n    this.createStyle('myelement', 'unclicked', 'hover',\n      this.merge(this.getStyle('myelement', 'unclicked', 'base'), {\n        style: {\n          backgroundColor: '#ccc',\n        }\n      } as CloukitStatefulAndModifierAwareElementThemeStyleDefinition));\n\n    this.createStyle('myelement', 'clicked', 'hover',\n      this.merge(this.getStyle('myelement', 'clicked', 'base'), {\n        style: {\n          backgroundColor: '#C98EFF',\n        }\n      } as CloukitStatefulAndModifierAwareElementThemeStyleDefinition));\n  }\n}\n"
}